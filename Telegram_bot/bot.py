import telebot
from telebot import types
import requests

# dict
global user_data
user_data = {}

# bot
token = '6600094209:AAFnVIdEzMaudDkJ_HpNn5WwxdZTIaubryQ'
bot = telebot.TeleBot(token)

# url syte
url_data_base = "http://zaskamilma.temp.swtest.ru/"
url_syte = "http://zaskamilma.temp.swtest.ru/site/autoriz.php"

# data base
get_data = lambda id, password: requests.post(f'{url_data_base}getdata.php', data={'id': id, 'password': password})
# change_password = lambda id, password, new_password: requests.post(f'{const_url}updatepassword.php', data={'id': id, 'password': password, 'new_password': new_password})
@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.from_user.id] = {}
    # –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_1 = types.KeyboardButton("–°–∞–π—Ç")
    btn_2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
    btn_3 = types.KeyboardButton("–í—ã—Ö–æ–¥")
    markup.add(btn_1, btn_2, btn_3)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç üëã, {0.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã üå§Ô∏è\n"
                                           "–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n"
                                           "1) –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞\n"
                                           "2) –°–∞–π—Ç\n"
                                           "3) –í—ã—Ö–æ–¥"
                                           "4) –û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö".format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_weather(message):
    if message.text == '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞':
        if get_user_data(message.from_user.id) != None:
            contr = get_data(get_user_data(message.from_user.id)['id'], get_user_data(message.from_user.id)['password'])
            bot.send_message(message.chat.id,f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üå°Ô∏è: {contr.json()['Data']['temper']}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å üí¶: {contr.json()['Data']['humidity']}%")
        else:
            ans_bot = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É—Å—Ç–∞, id –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª".format(message.from_user))
            bot.register_next_step_handler(ans_bot, save_login_password)

    if message.text == "–°–∞–π—Ç":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("3.14v0 weather", url=url_syte)
        markup.add(button1)
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name} –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç)".format(message.from_user), reply_markup=markup)

    if message.text == '–í—ã—Ö–æ–¥':
        if (get_user_data(message.from_user.id) != None):
            del user_data[message.from_user.id]
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ".format(message.from_user))

def get_user_data(uid):
    try:
        return user_data[uid]
    except KeyError:
        return None

def valid_id(id):
    try:
        int(id)
        return True
    except ValueError:
        return False

def save_login_password(message):
    login_pass = str(message.text).split(' ')
    if str.isnumeric(login_pass[0]) and valid_id(login_pass[0]):
        contr = get_data(login_pass[0], login_pass[1])
        if contr.text == "Incorrect password or id" or len(login_pass) != 2:
            bot.send_message(message.chat.id,"–ù–µ–≤–µ—Ä–Ω—ã–π id –∏–ª–∏ –ø–∞—Ä–æ–ª—å ‚ùó")
        else:
            bot.send_message(message.chat.id, f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ üå°Ô∏è: {contr.json()['Data']['temper']}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å üí¶: {contr.json()['Data']['humidity']}%")
            user_data[message.from_user.id] = {"id": login_pass[0], "password": login_pass[1]}
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π id –∏–ª–∏ –ø–∞—Ä–æ–ª—å ‚ùó")


bot.polling(none_stop=True)